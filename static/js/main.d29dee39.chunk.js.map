{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAceA,EAZF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,GAExB,OACI,yBAAKC,UAAU,oDACf,yBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,WACzD,4BAAKL,GACL,2BAAIC,KCgBGK,EArBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAIhB,OACI,oCACKA,EAAOC,KAAI,SAACC,EAAMC,GACf,OAEI,kBAAC,EAAD,CACIC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCF1BW,EAZE,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACf,OAAO,yBAAKV,UAAU,OAC1B,2BAAOA,UAAU,mCACjBW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCEKI,EAPA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACrEJ,EAAMK,WCcEC,E,YAhBX,aAAc,IAAD,8BACT,+CACKC,MAAM,CACPC,UAAW,GAHN,E,+EAMKC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAGxB,OAAIG,KAAKJ,MAAMC,SACJ,iDAERG,KAAKX,MAAMK,a,GAdKQ,aC0CZC,G,kBAnCX,aAAc,IAAD,8BACT,+CAWJC,eAAgB,SAACC,GACb,EAAKJ,SAAS,CAACK,YAAYD,EAAME,OAAOC,SAXxC,EAAKZ,MAAQ,CACTlB,OAAQ,GACR4B,YAAa,IAJR,E,iFAOO,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKZ,SAAS,CAACvB,OAAOmC,S,+BAK9B,IAAD,EAC0Bb,KAAKJ,MAA5BlB,EADH,EACGA,OAAQ4B,EADX,EACWA,YACTQ,EAAiBpC,EAAOqC,QAAO,SAAAC,GACjC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASZ,EAAYW,kBAEzD,OAAQvC,EAAOyC,OAGX,yBAAK7C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU1B,OAAQoC,OAP9B,2C,GAtBMZ,cCIEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.d29dee39.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id})=> {\r\n    // const {name, email, id} = props;\r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img src={`https://robohash.org/${id}?size=200x200`} alt='robots' />\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    // if (true){\r\n    //     throw new Error('nooooooo');\r\n    // }\r\n    return (\r\n        <>\r\n            {robots.map((user, i) => {\r\n                return (\r\n                    // <Card key={i} id={user.id} name={user.name} email={user.email}/>)})}\r\n                    <Card\r\n                        key={i}\r\n                        id={robots[i].id}\r\n                        name={robots[i].name}\r\n                        email={robots[i].email}\r\n                    />\r\n                )\r\n            })}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox =({searchChange})=>{\r\n    return(<div className='pa2'>\r\n<input className='pa3 ba b--green bg-lightest-blue'\r\ntype='search'\r\nplaceholder='search robots'\r\nonChange={searchChange}\r\n/>\r\n</div>\r\n    )\r\n}\r\n\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n    return (\r\n        <div style={{overflowY:'scroll', border: '1px solid black', height: '400px'}}>\r\n      {props.children}\r\n      </div>\r\n  )\r\n};\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            hasError : false\r\n        }\r\n    }\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    }\r\n    render(){\r\n        if (this.state.hasError){\r\n            return <h1>Ooops. Has error.</h1>\r\n    }\r\n    return this.props.children;\r\n    }\r\n}\r\nexport default ErrorBoundry;\r\n","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from './ErrorBoundry';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>response.json())\r\n        .then(users=>this.setState({robots:users}));\r\n    }\r\n    onSearchChange =(event)=>{\r\n        this.setState({searchField:event.target.value})\r\n    }\r\n    render(){\r\n        const {robots, searchField} = this.state;\r\n        const filteredRobots = robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n        return !robots.length?\r\n            <h1>Loading</h1>:\r\n         (\r\n            <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}